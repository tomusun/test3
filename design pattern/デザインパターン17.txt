・Stateパターン



■「状態」というものをクラスで表す。状態をクラスとして表現していれば、クラスを切り替えることによって「状態の変化」が表せるし、新しい状態を追加しなければならないときに何をプログラムすればよいかがはっきりする。
■システムの各状態を個別のクラスで表現するStateパターン。
状態遷移は、状態を表しているクラスのインスタンスを切り換えることで表現する。

▼サンプルプログラム
時間ごとに警備の状態が変化する金庫警備システム
画面に呼び出し状況などを表示することにする。
・Stateパターンを使わない金庫警備システムの疑似コード
警備システムのクラス
　金庫使用時に呼ばれるメソッド()｛
　if(昼間){
　　警備センターに利用の記録
　}else if(夜間){
　　警備センターに非常事態の通報
　}
}
　非常ベル使用時に呼ばれるメソッド()｛
　　警備センターに非常ベルの通報
　｝
　通常通話時に呼ばれるメソッド()｛
　if(昼間){
　　警備センターの呼び出し
　}else if(夜間){
　　警備センターの留守録の呼び出し
　}
｝

・Stateパターンを使った金庫警備システムの疑似コード
昼間という状態を表現するクラス｛
　金庫使用時に呼ばれるメソッド()｛
　　警備センターに利用の記録
　｝
　非常ベル使用時に呼ばれるメソッド()｛
　　警備センターに非常ベルの通報
　｝
　通常通話時に呼ばれる呼ばれるメソッド()｛
　　警備センターの呼び出し
　｝
｝
夜間という状態を表現するクラス｛
　金庫使用時に呼ばれるメソッド()｛
　　警備センターに非常事態の通報
　｝
　非常ベル使用時に呼ばれるメソッド()｛
　　警備センターに非常ベルの通報
　｝
　通常通話時に呼ばれる呼ばれるメソッド()｛
　　警備センターの留守録の呼び出し
　｝
｝
■Stateパターンを使わない方では、昼間・夜間という状態は各メソッドの中のif文のところに登場する。そして、各メソッドの中で現在の状態を調べている。
一方、Stateパターンを使う方では昼間・夜間という状態がクラスとして表現されている。状態がクラスとして表現されているので、その中のメソッドには、もはや状態チェックのためのif文は登場しない。

・
■Main.java
public class Main {
    public static void main(String[] args) {
        SafeFrame frame = new SafeFrame("State Sample");
        while (true) {
            for (int hour = 0; hour < 24; hour++) {
                frame.setClock(hour);   // 時刻の設定
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                }
            }
        }
    }
}
■Context.java
public interface Context {

    public abstract void setClock(int hour);                // 時刻の設定
    public abstract void changeState(State state);          // 状態変化
    public abstract void callSecurityCenter(String msg);    // 警備センター警備員呼び出し
    public abstract void recordLog(String msg);             // 警備センター記録
}
■DayState.java
public class DayState implements State {
    private static DayState singleton = new DayState();
    private DayState() {                                // コンストラクタはprivate
    }
    public static State getInstance() {                 // 唯一のインスタンスを得る
        return singleton;
    }
    public void doClock(Context context, int hour) {    // 時刻設定
        if (hour < 9 || 17 <= hour) {
            context.changeState(NightState.getInstance());
        }
    }
    public void doUse(Context context) {                // 金庫使用
        context.recordLog("金庫使用(昼間)");
    }
    public void doAlarm(Context context) {              // 非常ベル
        context.callSecurityCenter("非常ベル(昼間)");
    }
    public void doPhone(Context context) {              // 通常通話
        context.callSecurityCenter("通常の通話(昼間)");
    }
    public String toString() {                          // 文字列表現
        return "[昼間]";
    }
}
■NightState.java
public class NightState implements State {
    private static NightState singleton = new NightState();
    private NightState() {                              // コンストラクタはprivate
    }
    public static State getInstance() {                 // 唯一のインスタンスを得る
        return singleton;
    }
    public void doClock(Context context, int hour) {    // 時刻設定
        if (9 <= hour && hour < 17) {
            context.changeState(DayState.getInstance());
        }
    }
    public void doUse(Context context) {                // 金庫使用
        context.callSecurityCenter("非常：夜間の金庫使用！");
    }
    public void doAlarm(Context context) {              // 非常ベル
        context.callSecurityCenter("非常ベル(夜間)");
    }
    public void doPhone(Context context) {              // 通常通話
        context.recordLog("夜間の通話録音");
    }
    public String toString() {                          // 文字列表現
        return "[夜間]";
    }
}
■SafeFrame.java
public class SafeFrame extends Frame implements ActionListener, Context {
    private TextField textClock = new TextField(60);        // 現在時刻表示
    private TextArea textScreen = new TextArea(10, 60);     // 警備センター出力
    private Button buttonUse = new Button("金庫使用");      // 金庫使用ボタン
    private Button buttonAlarm = new Button("非常ベル");    // 非常ベルボタン
    private Button buttonPhone = new Button("通常通話");    // 通常通話ボタン
    private Button buttonExit = new Button("終了");         // 終了ボタン

    private State state = DayState.getInstance();           // 現在の状態

    // コンストラクタ
    public SafeFrame(String title) {
        super(title);
        setBackground(Color.lightGray);
        setLayout(new BorderLayout());
        // textClockを配置
        add(textClock, BorderLayout.NORTH);
        textClock.setEditable(false);
        // textScreenを配置
        add(textScreen, BorderLayout.CENTER);
        textScreen.setEditable(false);
        // パネルにボタンを格納
        Panel panel = new Panel();
        panel.add(buttonUse);
        panel.add(buttonAlarm);
        panel.add(buttonPhone);
        panel.add(buttonExit);
        // そのパネルを配置
        add(panel, BorderLayout.SOUTH);
        // 表示
        pack();
        show();
        // リスナーの設定
        buttonUse.addActionListener(this);
        buttonAlarm.addActionListener(this);
        buttonPhone.addActionListener(this);
        buttonExit.addActionListener(this);
    }
    // ボタンが押されたらここに来る
    public void actionPerformed(ActionEvent e) {
        System.out.println(e.toString());
        if (e.getSource() == buttonUse) {           // 金庫使用ボタン
            state.doUse(this);
        } else if (e.getSource() == buttonAlarm) {  // 非常ベルボタン
            state.doAlarm(this);
        } else if (e.getSource() == buttonPhone) {  // 通常通話ボタン
            state.doPhone(this);
        } else if (e.getSource() == buttonExit) {   // 終了ボタン
            System.exit(0);
        } else {
            System.out.println("?");
        }
    }
    // 時刻の設定
    public void setClock(int hour) {
        String clockstring = "現在時刻は";
        if (hour < 10) {
            clockstring += "0" + hour + ":00";
        } else {
            clockstring += hour + ":00";
        }
        System.out.println(clockstring);
        textClock.setText(clockstring);
        state.doClock(this, hour);
    }
    // 状態変化
    public void changeState(State state) {
        System.out.println(this.state + "から" + state + "へ状態が変化しました。");
        this.state = state;
    }
    // 警備センター警備員呼び出し
    public void callSecurityCenter(String msg) {
        textScreen.append("call! " + msg + "\n");
    }
    // 警備センター記録
    public void recordLog(String msg) {
        textScreen.append("record ... " + msg + "\n");
    }
}
■State.java
public interface State {
    public abstract void doClock(Context context, int hour);    // 時刻設定
    public abstract void doUse(Context context);                // 金庫使用
    public abstract void doAlarm(Context context);              // 非常ベル
    public abstract void doPhone(Context context);              // 通常通話
}



■Stateインターフェイス
金庫の状態を表すもの。
・時刻が設定されたとき
・金庫が使用されたとき
・非常ベルが押されたとき
・通常電話を行うとき
という出来事に対応して呼び出されるインターフェイス(API)を規定している。
Stateインターフェイスは状態依存のメソッドの集まり。
■DayStateクラス
昼間の状態をあら合わすクラス。このクラスはStateインターフェイスを実装している。
状態を表すクラスは、１つづつしかインスタンスを作らないことにする。状態が変化するたびに新しいインスタンスを作っていては、メモリと時間の無駄だから。そのためシングルトンパターンを使っている。
ContextインターフェイスのchangeStateメソッドを使って状態の変化を表現している。
Stateパターンでは、状態の違いがクラスの違いとして表現されるので、if文やswitch文による状態ごとの分岐が不要。
■NightStateクラス
夜間という状態を表すクラス。
■Contextインターフェイス
状態を管理したり、警備センターの呼び出しを行ったりするもの。
■SafeFrameクラス
GUIを使って金庫警備システムを実現するもの。(Safeは「金庫」という意味)。Contextインターフェイスを実装している。
各ボタンのaddActionListenerメソッドを呼び出してリスナーを設定する。このとき、addActionListenerメソッドの引数に「ボタンが押されたときに呼び出されるインスタンス」を指定する。addActionListenerメソッドの引数は、ActionListenerを実装している必要がある。ここでは、thisすなわちSafeFrameのインスタンスを指定
ボタンが押されたときリスナー(聞いている人)が呼び出されるという機構はObserverパターンと似ている。
現在の時刻や現在の金庫の状態を調べることなく、いきなりdoUseメソッドを呼び出している。これがStateパターンの特徴。もし、Stateパターンを使用しないでプログラミングした場合には、いきなりdoUseメソッドを呼び出すのではなく、「現在の時刻に応じた処理の分岐」を行うことなる。

・Stateパターンの登場人物



■State(状態)の役
State役は状態を表すためのもの。状態ごとに異なる振る舞いをするインターフェイス(API)を定める。このインターフェイス(API)は状態に依存した振る舞いをするメソッドの集まりになる。
Stateインターフェイスがこの役。
■ConcreteState(具体的な状態)の役
ConcreteState役は、具体的な個々の状態を表現するもの。State役で定められたインターフェイス(API)を具体的に実装する。DayState、NightStateがこの役。
■Context(状況、前後関係、文脈)の役
Context役は、現在の状態を表すConcreteState役を持つ。Stateパターンの利用者に必要なインターフェイス(API)を定める。ContextインターフェイスとSafeFrameクラスがこの役。

・分割して統治せよ



■divide and conquer）という方針は、プログラミングによく登場する。これは、複雑で大規模のものを取り扱う場合の方針。大きくてややここしい問題は、そのまま解こうとしてはいけない。その問題をまず小さな問題に分ける。それでもまだ解きにくかったら、さらに小さな問題に分ける。問題は、簡単に解けるまで小さくしてから解くこと。大きくてややこしい問題を1つ解く代わりに小さくて優しい問題たくさん解くこと。

・stateパターン強み



■Stateパターンでは「状態」というものをクラスで表現した。個々の具体的な状態を、別々のクラスとして表現して、問題を分割したわけ。1つのConcreteState役のクラスをコーディングしている最中、プログラマは、他のクラスのことを(ある程度)頭から追い出すことができる。状態が多い時にはStateパターンはその強みを発揮する。
■疑似コードを思いだす。Stateパターンを使わないと、金庫を使用したときに呼び出されるメソッドの中で、現在の状態に応じた条件分岐が発生する。状態が多くなればなるほど、この条件分岐が増えていくことになる。
Stateパターンは、システムの「状態」をクラスとして表現することで、複雑なプログラムを分割している。

・Stateパターンにおける「状態に依存した処理」の表現方法



■抽象メソッドとして宣言し、インターフェイスとする。
■具象メソッドとして実装し、個々のクラスとする。

・新しい状態を追加するのは簡単



Stateパターンに新しい状態を追加するのは簡単。サンプルプログラムでいえば、Stateインターフェイスを実装した××Stateクラスを作り、必要なメソッドを実装すればよいから。もちろん、状態遷移の部分は注意深くコーディングする必要がある。状態遷移の部分こそが、他のConcreteState役としての接点になるから。

・できあがっているStateパターンに、新しい「状態依存の処理」を追加するのは



困難。State役のインターフェイスにメソッドを追加することを意味し、すべてのConcreteState役に処理を追加することになるから。

・SafeFrameクラス中に登場した以下の2つの文
●SafeFrameのコンストラクタの中
　buttonUse.addActionListener(this);
●actionPerformedメソッドの中
　state.doUse(this);
⇒thisについて



どちらもSafeFrameクラスのインスタンス。
しかし、addActionListenerに渡されるときと、doUseに渡されるときとではちょっと扱いが異なる。
■addActionListenerに渡されるとき
このインスタンスは「ActionListenerインターフェイスを実装しているクラスのインスタンス」として扱われる。それは、addActionListenerメソッドの引数がActionListener型だから。
■doUseに渡されるとき
「Contextインターフェイスを実装しているクラスのインスタンス」として扱われる。それは、doUseの引数がContext型だから。